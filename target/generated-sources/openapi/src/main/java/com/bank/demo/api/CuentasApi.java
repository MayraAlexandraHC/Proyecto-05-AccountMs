/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bank.demo.api;

import com.bank.demo.model.CuentaRequest;
import com.bank.demo.model.CuentaResponse;
import com.bank.demo.model.ErrorResponse;
import com.bank.demo.model.TransaccionRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-06T08:10:11.580573300-05:00[America/Lima]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "cuentas", description = "the cuentas API")
public interface CuentasApi {

    default CuentasApiDelegate getDelegate() {
        return new CuentasApiDelegate() {};
    }

    /**
     * POST /cuentas : Crear una nueva cuenta
     *
     * @param cuentaRequest  (required)
     * @return Cuenta creada exitosamente (status code 201)
     *         or Error de validación (status code 400)
     */
    @Operation(
        operationId = "crearCuenta",
        summary = "Crear una nueva cuenta",
        responses = {
            @ApiResponse(responseCode = "201", description = "Cuenta creada exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CuentaResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error de validación", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cuentas",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CuentaResponse> crearCuenta(
        @Parameter(name = "CuentaRequest", description = "", required = true) @Valid @RequestBody CuentaRequest cuentaRequest
    ) {
        return getDelegate().crearCuenta(cuentaRequest);
    }


    /**
     * PUT /cuentas/{cuentaId}/depositar : Realizar un depósito
     *
     * @param cuentaId  (required)
     * @param transaccionRequest  (required)
     * @return Depósito realizado exitosamente (status code 200)
     *         or Error en la transacción (status code 400)
     */
    @Operation(
        operationId = "depositarDinero",
        summary = "Realizar un depósito",
        responses = {
            @ApiResponse(responseCode = "200", description = "Depósito realizado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CuentaResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error en la transacción", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cuentas/{cuentaId}/depositar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CuentaResponse> depositarDinero(
        @Parameter(name = "cuentaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cuentaId") Integer cuentaId,
        @Parameter(name = "TransaccionRequest", description = "", required = true) @Valid @RequestBody TransaccionRequest transaccionRequest
    ) {
        return getDelegate().depositarDinero(cuentaId, transaccionRequest);
    }


    /**
     * DELETE /cuentas/{id} : Eliminar una cuenta
     *
     * @param id  (required)
     * @return Cuenta eliminada exitosamente (status code 204)
     *         or Error al eliminar cuenta (status code 400)
     */
    @Operation(
        operationId = "eliminarCuenta",
        summary = "Eliminar una cuenta",
        responses = {
            @ApiResponse(responseCode = "204", description = "Cuenta eliminada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Error al eliminar cuenta", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cuentas/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> eliminarCuenta(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().eliminarCuenta(id);
    }


    /**
     * GET /cuentas : Listar todas las cuentas
     *
     * @param clienteId  (optional)
     * @return Lista de cuentas (status code 200)
     */
    @Operation(
        operationId = "listarCuentas",
        summary = "Listar todas las cuentas",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de cuentas", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CuentaResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cuentas",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<CuentaResponse>> listarCuentas(
        @Parameter(name = "clienteId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "clienteId", required = false) Integer clienteId
    ) {
        return getDelegate().listarCuentas(clienteId);
    }


    /**
     * GET /cuentas/{id} : Obtener detalles de una cuenta por ID
     *
     * @param id  (required)
     * @return Detalles de la cuenta (status code 200)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "obtenerCuenta",
        summary = "Obtener detalles de una cuenta por ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la cuenta", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CuentaResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cuentas/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<CuentaResponse> obtenerCuenta(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getDelegate().obtenerCuenta(id);
    }


    /**
     * PUT /cuentas/{cuentaId}/retirar : Realizar un retiro
     *
     * @param cuentaId  (required)
     * @param transaccionRequest  (required)
     * @return Retiro realizado exitosamente (status code 200)
     *         or Error en la transacción (status code 400)
     */
    @Operation(
        operationId = "retirarDinero",
        summary = "Realizar un retiro",
        responses = {
            @ApiResponse(responseCode = "200", description = "Retiro realizado exitosamente", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CuentaResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Error en la transacción", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cuentas/{cuentaId}/retirar",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CuentaResponse> retirarDinero(
        @Parameter(name = "cuentaId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("cuentaId") Integer cuentaId,
        @Parameter(name = "TransaccionRequest", description = "", required = true) @Valid @RequestBody TransaccionRequest transaccionRequest
    ) {
        return getDelegate().retirarDinero(cuentaId, transaccionRequest);
    }

}
